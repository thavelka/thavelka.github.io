<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-20T01:37:18-07:00</updated><id>http://localhost:4000/</id><title type="html">thavelka.github.io</title><subtitle>The problems of the past, today!</subtitle><entry><title type="html">9/15/17 - Gimme a beat</title><link href="http://localhost:4000/Clock/" rel="alternate" type="text/html" title="9/15/17 - Gimme a beat" /><published>2017-09-15T00:00:00-07:00</published><updated>2017-09-15T00:00:00-07:00</updated><id>http://localhost:4000/Clock</id><content type="html" xml:base="http://localhost:4000/Clock/">&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-15/full_clock_from_side.jpg&quot; alt=&quot;Final clock setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My shipment from Mouser came in, and my desk is now covered in ICs,
resistors, LEDs, and jumpers.&lt;/p&gt;

&lt;p&gt;Ciarcia’s book and other sources online start the building process off
with the clock, so I did the same. This was my first time working with
ICs, and the clock seemed like a simple and rewarding place to
start. Flashing LEDs will can make anyone feel like they’ve made
something cool.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;My first attempt at a functioning clock was Ciarcia’s single step
design using a 7000, 7404, and an SPDT switch. This seemed simple
enough, just like any circuit where a component is turned on with a
switch. I also set up the slow clock, made with a 7404, capacitor, and
resistor, as pictured in the book. A 4-pin DIP switch block selected
between the two clock circuits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-15/book_clock.png&quot; alt=&quot;Clocks from book&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had trouble testing and getting any validation from these circuits
though. I tried hooking an LED up to the circuit’s output and
connecting the cathode to ground, but I think this resulted in the LED
emitting all the time due to the clocks 330 Ohm pullup to 5V. At the
time, I hadn’t realized how IC logic worked outside of putting a high
or low voltage signal on one side and recieving a high or low voltage
signal on the other side. It took a day or two to discover that an LED
could reach ground through an ICs output when the output pin was in a
low state. For now, I took the circuits apart, cleaned up, and called
it a night.&lt;/p&gt;

&lt;p&gt;The next day, I tried to make sense of the previous night’s errors. I
tried to put together a logic probe circuit, but lacked some of the
materials. I figured that my Arduino might be able to read logic high
or low through the input pins, so I searched online to see if anyone
had set up an Arduino as a probe. I found a few solutions that not
only worked as a probe, but even as a full-blown multi-channel logic
analyzer. Hell yeah! Setup was simple enough: upload the sketch to the
Arduino, choose a port and baud rate, and launch the LogicSniffer
software. The sketch implements a protocol fot interfacing with the
open-source logic analyzer software. I set up a manual clock circuit
as a I had the previous day, then started up the analyzer. I flipped
the switch and captured data from the device a few times and was able
to see the input switching between high and low. Seems like everything
had actually been working, but I just couldn’t see it before due to wiring
errors.&lt;/p&gt;

&lt;p&gt;Feeling a little more confident and prepared, I watched Julian Ilett’s
Z80 video again. He seemed to set everything up so quickly and easily,
so I attempted to copy that. Julian used a simple 555 astable circuit
to clock his Z80, and the 555’s output was even able to power an LED
to show the clock’s pulse. I found a website for calculating 555 timer
setups and figured out what I’d need to get a circuit that would flash
around 4 times per second with almost a 50% duty cycle. I dug the
components out of my drawers and got a similar set up and working. The
first flashing LED; cool!&lt;/p&gt;

&lt;p&gt;After getting the slow clock set up, I was
anxious to get the blazing 2 MHz oscillator from Mouser up and
running. The clock I bought was an all-in-one crystal oscillator
circuit. All I had to do was hook up 5V and ground to have a perfect
clock.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-15/full_clock.jpg&quot; alt=&quot;Test clock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I ran both outputs through a 7404 before hooking up the LEDs so I
could measure the real outputs, take some current off the ICs, and
still have flashing light to match the clock pulses. The 555’s LED was
looking great, but the oscillator’s LED stayed a dull green. That
seemed like it might be correct though, due to the circuit toggling 2
million times per second.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-15/testing_clock.jpg&quot; alt=&quot;Testing clock logic&quot; /&gt;
&lt;img src=&quot;/images/posts/2017-09-15/screen_good_clock.png&quot; alt=&quot;Good clock&quot; /&gt;
&lt;img src=&quot;/images/posts/2017-09-15/screen_555_calc.png&quot; alt=&quot;Calculator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To be sure, I hooked both up to the Arduino’s digital pins and started
up LogicSniffer. The captured data looked great! My 555’s wavelengths
were uniform, and the oscillator was putting out a perfect 2 MHz
square wave. I did notice that the 555’s frequency was a bit slower
than the value from the calculator. Off by like 0.3 Hz even, which
seems like a lot when the calculated frequency was only about 3.9 Hz
to start with. Perhaps this is what the resistor tolerance is
about. I’m using an 18k resistor in the 555, so if it’s 5-10% off, the
actual frequency may be correct after all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-15/screen_bad_clock.png&quot; alt=&quot;Bad clock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The analyzer started acting up after a few more captures, especially
when I got the clock selector switch up in the mix. A consistant
pattern started to emerge on any channels with a wire inserted, and I
eventually noticed that the strange wave was at 60 Hz, which must be
interference. No amount of unplugging and restarting could make the
interference go away. I tried using decoupling capacitors and pullup
resistors, but those didn’t make a difference either. When I
disconnected my clocks from the Arduino, I saw that the interference
was still there, so my clocks probably aren’t the issue. Even with the
interference problem, I highly recommend LogicSniffer if you’re broke
and clueless like me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-15/work_area.jpg&quot; alt=&quot;Work area&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="Z80" /><category term="Z80" /><category term="retrocomputing" /><summary type="html">My shipment from Mouser came in, and my desk is now covered in ICs, resistors, LEDs, and jumpers. Ciarcia’s book and other sources online start the building process off with the clock, so I did the same. This was my first time working with ICs, and the clock seemed like a simple and rewarding place to start. Flashing LEDs will can make anyone feel like they’ve made something cool.</summary></entry><entry><title type="html">9/14/17 - Power Up</title><link href="http://localhost:4000/Power-Up/" rel="alternate" type="text/html" title="9/14/17 - Power Up" /><published>2017-09-14T00:00:00-07:00</published><updated>2017-09-14T00:00:00-07:00</updated><id>http://localhost:4000/Power-Up</id><content type="html" xml:base="http://localhost:4000/Power-Up/">&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-14/new_power_cable.jpg&quot; alt=&quot;New cables&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I picked up a bigger breadboard at Fry’s, along with a few logic chips to play
around with while waiting for my shipment from Mouser to come in. When I got
home and started setting things up, I realized that the only way to get 5V power
to my breadboard was through jumpers from my Arduino’s 5V and Gnd pins, which
isn’t going to work if this project is going anywhere. It was late and I
was impatient, so I decided to improvise. I keep a giant bag of old phone
chargers and USB cables stashed away just in case, and I rememebered that USB
wall chargers put out 5V, even up to 2A sometimes. I said fuck it and got to
work.
&lt;!--break--&gt;&lt;/p&gt;

&lt;p&gt;I recall from my XDA-Developers days how people used to praise BlackBerry USB
cables for their thick conductors and reliablility. I needed to be able to
solder or crimp onto the power lines of the USB cable to get some kind of
connector working, so a BlackBerry cable seemed like the best choice. Upon
snipping the micro USB tip off and slicing down the insulation, I was greeted
with a mess of wire strand shards all over my desk, which will probably end up
stuck in my feet later. It seems that the cable was shielded pretty well. The
power conductors ended up being very, very thin, and mostly consisted of some
synthetic fibers inside the insulation, perhaps for strain relief. I was already
this far in, so I stripped back some wire, cut up a breadboard jumper, and
attempted to splice the two together. It actually ended up working, but got what
an ugly cable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-14/shitty_cable.jpg&quot; alt=&quot;shitty cable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I could not imagine this new piece of crap being nearly as reliable as the
original cable, so I tried to see what else I could find. I came across the wall
adapter for an old active USB hub that I don’t use anymore and was pleased to
see that it put out 5V at a nice 3A max or so. The cables were super thick and
there were no extra cables, or shielding to get in the way. I cut the plug
off the end and was presented with two nice, strong, shiny copper wires. The
wires ended up being too big to stick into a breadboard, so I got some
heatshrink and snapped off two header pins and soldered it all together. This
one ended up looking much better, but I did have trouble keeping in the
breadboard. I also didn’t like having those two conductors right next to each
other, soldered ono the header pins. I could see that shorting out at some
point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-14/better_cable.jpg&quot; alt=&quot;better cable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, fucking up those cables took long enough to where I didn’t get to mess
with any of my new ICs that night, and so I just drove to Fry’s in the morning
to find something better. Most of the universal, adjustable DC adapters were at
least $20, which I wasn’t looking to pay right now. In the prototyping section,
I did come across something like my hacked-together USB cable thing, but done
correctly. This cable has a male USB A connector on one end, and a DC barrel
jack on the other. Nice! I think this cable was about $3.00.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-14/new_power_cable.jpg&quot; alt=&quot;new cables&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I still needed a female connector to get the power to the board though. I
couldn’t find any jacks that would fit on a PCB, but in that same prototyping
section, they had a female DC jack with a two pin “JST” connector on the end,
like you might see on a computer fan or sensor cable. I couldn’t find any female
JST connectors in the store, but I thought I could maybe fit two right-angle
header pins in there and stick that in the breadboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-14/cable_tip.jpg&quot; alt=&quot;connector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This ended up working very well. The connection is loose, but that’s nothing
some tape can’t fix for now. I finally have some reliable power from the
wall. Total cost of power stuff was about $6.00 I think. I now see that I could
have gotten a 5V wall charger and a proper connector online for less than $5,
but instant gratification is a bitch, and I lose all patience as soon as I get
really excited about a project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-14/loose_cable.jpg&quot; alt=&quot;fixed it&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I think this should do the job while I’m prototyping on the breadboard, and I’ll
be ordering a proper barrel jack to solder in when I move to PCB. If the USB
cable in the phone charger isn’t providing enough current when the project is
further along, I’ll get a male tip for the USB hub charger to get that 3A. Now
that power is figured out, I can really get to work.&lt;/p&gt;</content><author><name></name></author><category term="Z80" /><category term="Z80" /><category term="retrocomputing" /><summary type="html">I picked up a bigger breadboard at Fry’s, along with a few logic chips to play around with while waiting for my shipment from Mouser to come in. When I got home and started setting things up, I realized that the only way to get 5V power to my breadboard was through jumpers from my Arduino’s 5V and Gnd pins, which isn’t going to work if this project is going anywhere. It was late and I was impatient, so I decided to improvise. I keep a giant bag of old phone chargers and USB cables stashed away just in case, and I rememebered that USB wall chargers put out 5V, even up to 2A sometimes. I said fuck it and got to work.</summary></entry><entry><title type="html">9/13/17 - Project Intro/First steps/Plans</title><link href="http://localhost:4000/Project-Intro/" rel="alternate" type="text/html" title="9/13/17 - Project Intro/First steps/Plans" /><published>2017-09-13T00:00:00-07:00</published><updated>2017-09-13T00:00:00-07:00</updated><id>http://localhost:4000/Project-Intro</id><content type="html" xml:base="http://localhost:4000/Project-Intro/">&lt;p&gt;&lt;img src=&quot;/images/posts/2017-09-13/box_o_parts.jpg&quot; alt=&quot;Box o' parts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I make software. I like my job very much. I get paid to sit at home
and code all day, which is exactly what I would be doing if I didn’t
have a job.&lt;/p&gt;

&lt;p&gt;Hardware is just cooler though. Hardware hacks will always be
cooler. Nothing beats the feeling of making something you can see with
your eyes and use with your hands. It’s been a while since I’ve been able to take on a project where I get to leave my comfort zone and learn something completely new. I
don’t really know anything about computers, so I’m going to make one. This project will be serving as a sort of exploratory experience, and I’ll be trying to stick to reading datasheets and probing around with meters rather than following any guides and tutorials too closely. I will surely be making a lot of mistakes along the way, so I wouldn’t recommend copying my steps too closely either, but feel free to follow along.
&lt;!--break--&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-z80&quot;&gt;Why Z80?&lt;/h2&gt;
&lt;p&gt;No good reason. I didn’t know enough to choose from an engineering standpoint, but some quick googling showed that I’ve unknowingly been interacting with Z80s my entire life through calculators, video games, and embedded systems everywhere. I like that. They’re still used today, 40 years later. The name is cool. Good enough for me.&lt;/p&gt;

&lt;h2 id=&quot;project-goals&quot;&gt;Project Goals&lt;/h2&gt;
&lt;p&gt;I plan to let this project be a learning experience and nothing more, but we’ll see how that plays out. Hooking up a keyboard, tape drive, monitor, and modem would be very, very cool, but I’ll be thrilled if I can get a computer I built myself to turn on and listen to a few instructions that I toggle in with switches.&lt;/p&gt;

&lt;p&gt;I have seen a few homebrew builds with backplanes, custom bus patterns, and card-based hardware, and I like that very much. I think that my Z80 build will end up organized like that inside a nice enclosure eventually, but I think that would be biting off more than I can chew at the moment. I’ll be starting the project off as a single board computer. Getting the componenents to play nice together without worrying about bus and power issues will enough of a challenge for now.&lt;/p&gt;

&lt;p&gt;I’d like to keep everything in the build simple and handmade. I’ll be using some newer test equipment while learning and debugging, but hopefully the end product will consist solely of hardware that would have been available in the 70s and 80s. I’m going to avoid buying any pre-fabricated boards or controllers, since that would really just be buying a slow, outdated computer for too much money. I’m also broke as shit.&lt;/p&gt;

&lt;p&gt;I want the computer to have a name, too. I’ll be working on that.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;p&gt;I’ve been reading through Steve Ciarcia’s &lt;em&gt;&lt;a href=&quot;https://books.google.com/books?id=mVQnFgWzX0AC&amp;amp;lpg=PP1&amp;amp;pg=PP1#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;Build Your Own Z80 Computer&lt;/a&gt;&lt;/em&gt; repeatedly for the past week, and it’s been a godsend. Ciarcia explains &lt;em&gt;why&lt;/em&gt; as much as he explains &lt;em&gt;how&lt;/em&gt;, so I don’t think I’ll have too much trouble adapting his plans into my own designs. Donn Stewart’s &lt;a href=&quot;http://cpuville.com&quot;&gt;CPUVille&lt;/a&gt; website has also been a source of inspiration. His schematics are simple and self-explanatory, and his expansion boards were all functioning prototypes on perfboard at some point, which shows that you don’t need printed circuits to make something functional. He’s even put out a guide for getting the Palo Alto Tiny BASIC from &lt;em&gt;Dr. Dobb’s&lt;/em&gt; working on the Z80. One of the most motivating resources I’ve found is &lt;a href=&quot;https://www.youtube.com/watch?v=AZb4NLXx1aM&quot;&gt;this video&lt;/a&gt; of Julian Ilett hooking up a minimal Z80 setup in a matter of minutes. No RAM, no ROM, and a 555 circuit as a clock. Shows that it’s possible to isolate components and take things one step at a time.&lt;/p&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;
&lt;p&gt;I spent a night or two scanning all of the schematics in &lt;em&gt;BYO Z80&lt;/em&gt; and getting an idea of the parts I’ll be needing to get a basic setup running. I ordered a 6MHz CMOS Z80, 64k RAM, and a bunch of 74HC series ICs from Mouser. In my excitement, I also drove to Fry’s the next day to pick up a few extra chips to play around with while waiting on the shipment, as well as a bigger breadboard and some solid wire. I’ve never worked with ICs before, so having some extras around can’t hurt.&lt;/p&gt;

&lt;p&gt;Since I don’t really know what I’m doing yet, I decided to wait to order a board until I knew I could fit everything on it. S100 prototype boards seem pretty expensive and hard to come by, and I’m not sure if a single 160x100mm eurocard will be big enough. For the next few weeks, I’ll be testing each module out on a breadboard and moving them onto something more permanent once I know everything will work.&lt;/p&gt;</content><author><name></name></author><category term="Z80" /><category term="Z80" /><category term="retrocomputing" /><summary type="html">I make software. I like my job very much. I get paid to sit at home and code all day, which is exactly what I would be doing if I didn’t have a job. Hardware is just cooler though. Hardware hacks will always be cooler. Nothing beats the feeling of making something you can see with your eyes and use with your hands. It’s been a while since I’ve been able to take on a project where I get to leave my comfort zone and learn something completely new. I don’t really know anything about computers, so I’m going to make one. This project will be serving as a sort of exploratory experience, and I’ll be trying to stick to reading datasheets and probing around with meters rather than following any guides and tutorials too closely. I will surely be making a lot of mistakes along the way, so I wouldn’t recommend copying my steps too closely either, but feel free to follow along.</summary></entry></feed>